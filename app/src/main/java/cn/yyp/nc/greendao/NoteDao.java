package cn.yyp.nc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.yyp.nc.util.StringConverter;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property NoteType = new Property(3, int.class, "noteType", false, "NOTE_TYPE");
        public final static Property CreateTime = new Property(4, String.class, "createTime", false, "CREATE_TIME");
        public final static Property IsTop = new Property(5, boolean.class, "isTop", false, "IS_TOP");
        public final static Property IsStar = new Property(6, boolean.class, "isStar", false, "IS_STAR");
        public final static Property ImageList = new Property(7, String.class, "imageList", false, "IMAGE_LIST");
        public final static Property VoiceUrl = new Property(8, String.class, "voiceUrl", false, "VOICE_URL");
        public final static Property VideoUrl = new Property(9, String.class, "videoUrl", false, "VIDEO_URL");
    }

    private final StringConverter imageListConverter = new StringConverter();

    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"CONTENT\" TEXT," + // 2: content
                "\"NOTE_TYPE\" INTEGER NOT NULL ," + // 3: noteType
                "\"CREATE_TIME\" TEXT," + // 4: createTime
                "\"IS_TOP\" INTEGER NOT NULL ," + // 5: isTop
                "\"IS_STAR\" INTEGER NOT NULL ," + // 6: isStar
                "\"IMAGE_LIST\" TEXT," + // 7: imageList
                "\"VOICE_URL\" TEXT," + // 8: voiceUrl
                "\"VIDEO_URL\" TEXT);"); // 9: videoUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Note entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getNoteType());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
        stmt.bindLong(6, entity.getIsTop() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsStar() ? 1L: 0L);
 
        List imageList = entity.getImageList();
        if (imageList != null) {
            stmt.bindString(8, imageListConverter.convertToDatabaseValue(imageList));
        }
 
        String voiceUrl = entity.getVoiceUrl();
        if (voiceUrl != null) {
            stmt.bindString(9, voiceUrl);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(10, videoUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getNoteType());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
        stmt.bindLong(6, entity.getIsTop() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsStar() ? 1L: 0L);
 
        List imageList = entity.getImageList();
        if (imageList != null) {
            stmt.bindString(8, imageListConverter.convertToDatabaseValue(imageList));
        }
 
        String voiceUrl = entity.getVoiceUrl();
        if (voiceUrl != null) {
            stmt.bindString(9, voiceUrl);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(10, videoUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.getInt(offset + 3), // noteType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createTime
            cursor.getShort(offset + 5) != 0, // isTop
            cursor.getShort(offset + 6) != 0, // isStar
            cursor.isNull(offset + 7) ? null : imageListConverter.convertToEntityProperty(cursor.getString(offset + 7)), // imageList
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // voiceUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // videoUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNoteType(cursor.getInt(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsTop(cursor.getShort(offset + 5) != 0);
        entity.setIsStar(cursor.getShort(offset + 6) != 0);
        entity.setImageList(cursor.isNull(offset + 7) ? null : imageListConverter.convertToEntityProperty(cursor.getString(offset + 7)));
        entity.setVoiceUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVideoUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Note entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
